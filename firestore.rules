rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Règles pour la collection users
    match /users/{userId} {
      // Tout le monde peut lire les profils utilisateurs
      allow read: if isAuthenticated();
      // Seul l'utilisateur lui-même ou un admin peut modifier son profil
      allow write: if isOwner(userId) || isAdmin();

      // Sous-collections des utilisateurs
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }

    // Agents (lecture publique, écriture réservée aux admins)
    match /agents/{agentId} {
      allow read: if true;
      allow create, delete: if isAdmin();
      // Permettre aux utilisateurs authentifiés de mettre à jour seulement les champs de notation
      allow update: if isAdmin() || (
        isAuthenticated() &&
        // Vérifier que seuls les champs de notation sont modifiés
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['averageRating', 'ratingCount']) &&
        // Vérifier que les autres champs restent inchangés
        request.resource.data.fullName == resource.data.fullName &&
        request.resource.data.age == resource.data.age &&
        request.resource.data.gender == resource.data.gender &&
        request.resource.data.profession == resource.data.profession
      );
    }

    // Réservations (lecture/écriture par le créateur ou admin)
    match /reservations/{reservationId} {
      allow read, write: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated();
    }

    // Avis (lecture publique, écriture par utilisateur connecté)
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Règles pour la collection settings
    match /settings/{settingId} {
      // Tout le monde peut lire les paramètres
      allow read: if isAuthenticated();
      // Seul l'admin peut modifier les paramètres
      allow write: if isAdmin();
    }

    // Règles pour la collection reports
    match /reports/{reportId} {
      // Seul l'admin peut lire/écrire les rapports
      allow read, write: if isAdmin();
    }

    // Règles pour la collection notifications
    match /notifications/{notificationId} {
      // Tout utilisateur authentifié peut lire les notifications
      allow read: if isAuthenticated();
      // Seul l'admin peut créer/modifier/supprimer des notifications
      allow write: if isAdmin();
    }

    // Règles pour la collection userPreferences
    match /userPreferences/{userId} {
      // Un utilisateur peut lire/écrire ses propres préférences
      // Un admin peut lire/écrire toutes les préférences
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // Règles par défaut - refuser tout accès non spécifié
    match /{document=**} {
      allow read, write: if false;
    }
  }
}